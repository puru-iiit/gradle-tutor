buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'idea'
    id 'jacoco'
}

allprojects {
    repositories {
        mavenCentral()
        maven { url "http://nexus.pentaho.org/content/groups/omni/" }
    }
    apply plugin: 'jacoco'
    jacoco {
        toolVersion = "0.8.3"
    }
}
subprojects {
    group = 'com.puru.app'
    version = '0.0.1'
    sourceCompatibility = '11'

    repositories {
        mavenCentral()
        maven { url "http://nexus.pentaho.org/content/groups/omni/" }
    }

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'

    test {
        systemProperty "user.timezone", "UTC"
    }

    if (it.name != 'client') {
        dependencies {
            implementation files("$rootDir/libs/lib-1.1.1.RC30.jar")

            implementation 'io.jsonwebtoken:jjwt-api:0.10.7'
            implementation 'io.jsonwebtoken:jjwt-impl:0.10.7', 'io.jsonwebtoken:jjwt-jackson:0.10.7'
            implementation 'org.springframework.boot:spring-boot-starter-actuator'

            testCompile group: 'junit', name: 'junit', version: '4.12'
            compile group: 'org.mockito', name: 'mockito-core', version: '3.1.0'

            compile group: 'javax.inject', name: 'javax.inject', version: '1'
            compile group: 'org.springframework', name: 'spring-context', version: '5.2.6.RELEASE'
            compile group: 'org.springframework.security', name: 'spring-security-core', version: '4.2.3.RELEASE'
            compile group: 'org.springframework.retry', name: 'spring-retry', version: '1.3.0'
            compile group: 'org.springframework', name: 'spring-aspects', version: '5.2.7.RELEASE'

            compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.12.1'
            compile 'com.google.api.grpc:proto-google-common-protos:1.16.0'
            compile 'com.google.api.grpc:grpc-google-common-protos:1.16.0'
            compile group: 'com.google.protobuf', name: 'protobuf-java-util', version: '3.12.2'

            compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
            compile group: 'com.google.guava', name: 'guava', version: '29.0-jre'
            implementation 'com.auth0:java-jwt:3.10.3'
            compile group: 'commons-io', name: 'commons-io', version: '2.7'
            compile group: 'org.mybatis.spring.boot', name: 'mybatis-spring-boot-starter', version: '2.1.3'
            compile group: 'org.postgresql', name: 'postgresql', version: '42.2.17'
            compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.11'
            
        }
    } else {
        dependencies {
            implementation files("$rootDir/libs/lib-1.1.1.RC30.jar")

            compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.12.1'
            compile 'com.google.api.grpc:proto-google-common-protos:1.16.0'
            compile 'com.google.api.grpc:grpc-google-common-protos:1.16.0'
            compile group: 'com.google.protobuf', name: 'protobuf-java-util', version: '3.12.2'

            implementation 'io.jsonwebtoken:jjwt-api:0.10.7'
            implementation 'io.jsonwebtoken:jjwt-impl:0.10.7', 'io.jsonwebtoken:jjwt-jackson:0.10.7'
        }
    }

}
test {
    systemProperty "user.timezone", "UTC"
    useJUnitPlatform()
}

task codeCoverageReport(type: JacocoReport) {

    // Gather execution data from all subprojects
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    // Add all relevant sourcesets from the subprojects
    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }
   
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['com/arcesium/nautilus/adapter/geneva/ingress/domain/**'])
        }))
    }
           
}

// always run the tests before generating the report
codeCoverageReport.dependsOn {
    subprojects*.test
}
